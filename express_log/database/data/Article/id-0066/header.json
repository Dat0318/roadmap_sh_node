{
  "@id": "0066",
  "title": "Bài 19 - Number & Math",
  "short-title": "Bài 19 - Number & Math",
  "category-id": "05",
  "keywords": "lập trình web, hướng dẫn cơ bản, javascript",
  "content": "Bài viết này là một trong số những bài thuộc chỉ mục bổ sung của Sub-Series JavaScript. Ở đây chúng ta sẽ điểm qua một vài giá trị số học đặc biệt thường gặp, một số phương thức chuyển đổi các giá trị từ các kiểu khác sang `number`, và một số hàm làm việc với các giá trị số học được cung cấp bởi các object Number & Math.\r\n\r\n## Các giá trị số học đặc biệt thường gặp\r\n\r\nCác giá trị số học đặc biệt được JavaScript lưu trữ ở dạng thuộc tính của class `Number` và chỉ hỗ trợ việc truy xuất để sử dụng, không thể thay đổi.\r\n\r\n- [Number.POSITIVE_INFINITY](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) - biểu thị cho một giá trị số học lớn vô cùng, có thể được truy xuất ngắn gọn là `Infinity` thay vì `Number.POSITIVE_INFINITY`.\r\n- [Number.NEGATIVE_INFINITY](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY) - biểu thị cho một giá trị số học lớn vô cùng, có thể được truy xuất ngắn gọn là `-Infinity` thay vì `Number.NEGATIVE_INFINITY`.\r\n- [Number.MAX_VALUE](Number.MAX_VALUE) - giá trị hữu hạn lớn nhất thuộc kiểu `Number`.\r\n- [Number.MIN_VALUE](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE) - giá trị hữu hạn nhỏ nhất thuộc kiểu `Number`.\r\n\r\nNếu cần làm việc với các giá trị lớn hơn 2 giá trị biên này, chúng ta sẽ cần sử dụng [kiểu BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\r\n\r\n- [Number.NaN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN) - Not a Number - là giá trị được trả về khi thực hiện các phép chuyển đổi dữ liệu về `number` không khả dụng. Có thể được truy xuất ngắn gọn là `NaN` thay vì `Number.NaN`. Giá trị `NaN` không tương đồng với bất kỳ giá trị số học nào bao gồm cả chính nó. :D\r\n- [Math.PI](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI) - hằng số đặc biệt biểu thị cho [cuộc đời của Pi](https://en.wikipedia.org/wiki/Life_of_Pi_(film)). :D\r\n\r\n```number.js\r\nconsole.log(1 / 0);   // Infinity\r\nconsole.log(typeof Infinity);   // number\r\nconsole.log(9_999_999_999 > Infinity);   // false\r\n\r\nconsole.log(-1 / 0);   // -Infinity\r\nconsole.log(typeof -Infinity);   // number\r\nconsole.log(-9_999_999_999 < Infinity);   // false\r\n\r\nconsole.log(1 / 'one');   // NaN\r\nconsole.log(typeof NaN);   // number\r\nconsole.log(NaN == NaN);   // false\r\n```\r\n\r\nĐể kiểm tra xem một giá trị đang được lưu trữ trong một biến nào đó có phải là `NaN` hoặc `Infinite` hay không, chúng ta có thể sử dụng các phương thức -\r\n\r\n- [Number.isFinite(value)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite) - trả về kết quả là `true` nếu `value` không phải là `Infinite` hoặc `-Infinite`, ngược lại trả về `false`.\r\n- [Number.isNaN(value)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN) - trả về kết quả là `true` nếu `value` là `NaN`.\r\n\r\n```number.js\r\nconsole.log( Number.isFinite(1 / 0) );   // false\r\nconsole.log( Number.isNaN(1 / 'a') );   // true\r\n```\r\n\r\n## Chuyển đổi giá trị từ kiểu khác sang Number\r\n\r\nGiống với các `class` biểu trưng cho các kiểu dữ liệu đơn nguyên `primitive` khác, `Number` cũng được thiết kế để sử dụng như một hàm chuyển đổi dữ liệu. Hàm này sẽ giúp chúng ta chuyển đổi dữ liệu từ các kiểu khác thành một giá trị `primitive number`.\r\n\r\n```number.js\r\n// undefined biểu thị cho kiểu dữ liệu chưa được định nghĩa\r\nconsole.log( Number(undefined) );   // NaN\r\n\r\n// null biểu thị cho một giá trị vô nghĩa\r\nconsole.log( Number(null) );   // 0\r\n\r\nconsole.log( Number(false) );   // 0\r\nconsole.log( Number(true) );   // 1\r\n\r\n// chuỗi có chứa ký tự khác chữ số là NaN\r\nconsole.log( Number('') );   // 0\r\nconsole.log( Number('0') );   // 0\r\nconsole.log( Number('000') );   // 0\r\nconsole.log( Number('0.1') );   // 0.1\r\nconsole.log( Number('0a') );   // NaN\r\nconsole.log( Number('one') );   // NaN\r\n\r\n// giá trị duy nhất của mảng sẽ được dùng làm đại diện\r\n// một mảng có nhiều hơn một giá trị sẽ là `NaN`\r\nconsole.log( Number([]) );   // 0\r\nconsole.log( Number([1]) );   // 1\r\nconsole.log( Number(['1']) );   // 1\r\nconsole.log( Number([0, 1]) );   // NaN\r\n\r\n// một object bất kỳ luôn là NaN ngoại trừ các object `new Number()`\r\nconsole.log( Number({}) );   // NaN\r\nconsole.log( Number(new Number(1)) );   // 1\r\n```\r\n\r\nKhi chúng ta sử dụng các giá trị không phải là giá trị số học trong các biểu thức yêu cầu truyền vào giá trị số học, thì các giá trị ấy sẽ được tự động chuyển đổi bằng hàm `Number()` với quy tắc như trên.\r\n\r\nĐể có được giá trị chuyển đổi khả dụng cao hơn từ các chuỗi ký tự, chúng ta có thể sử dụng các phương thức -\r\n\r\n- [Number.parseInt(string)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt)\r\n- [Number.parseFloat(string)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat)\r\n\r\nCác phương thức này sẽ quét từ đầu chuỗi ký tự cho đến điểm đầu tiên gặp một ký tự vô nghĩa với các giá trị số học.\r\n\r\n```parse.js\r\nvar one = Number.parseInt('1.02a');\r\nconsole.log(one);   // 1\r\n\r\nvar oneee = Number.parseFloat('1.02a');\r\nconsole.log(oneee);   // 1.02\r\n```\r\n\r\n## Một số phương thức để làm việc với các giá trị Number\r\n\r\nBên cạnh việc chuyển đổi kiểu dữ liệu thì đôi khi chúng ta cũng sẽ cần định dạng các giá trị số học để trình bày trên giao diện người dùng. Ví dụ như làm ngắn phần thập phân của các số vô tỉ bằng phương thức [number.toFixed(n)](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) - với `0 <= n <= 20`.\r\n\r\n```fixed.js\r\nvar theNumber = new Number(1.23456789);\r\nconsole.log( theNumber.toFixed(2) );\r\n// 1.23\r\n\r\n// hoặc\r\nconsole.log( 1.23456789.toFixed(2) );\r\n```\r\n\r\nCác phương thức phổ biến khác để làm việc với các giá trị `number` được cung cấp bởi [thư viện Math](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math). Tuy nhiên các phương thức này sẽ chỉ hỗ trợ các giá trị trong khoảng  `Number.MIN_VALUE - Number.MAX_VALUE`, và không hỗ trợ các giá trị [BigInt](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt).\r\n\r\n```math.js\r\n// giá trị ngẫu nhiên trong khoảng từ 0 - 1\r\nconsole.log( Math.random() );   // ko đoán được :D\r\n\r\n// trị tuyệt đối - absolute\r\nconsole.log( Math.abs(-1) );   // 1\r\n\r\n// số nguyên làm tròn lên `trần`\r\nconsole.log( Math.ceil(1.23) );   // 2\r\n\r\n// số nguyên làm tròn xuống `sàn`\r\nconsole.log( Math.floor(1.23) );   // 1\r\n\r\n// giá trị lớn nhất & nhỏ nhất\r\nvar numberArray = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\nconsole.log( Math.max(...numberArray) );   // 9\r\nconsole.log( Math.min(1, 2, 3) );   // 1\r\n\r\n// lũy thừa cơ số x bậc y\r\nconsole.log( Math.pow(2, 10) );   // 1024\r\n\r\n// loại bỏ hết phần thập phân\r\nconsole.log( Math.trunc(1.23456789) );   // 1\r\n\r\n// căn bậc 2\r\nconsole.log( Math.sqrt(81) );   // 9\r\n\r\n// arc\r\nconsole.log( Math.sin(Math.PI / 2) );   // 1\r\nconsole.log( Math.cos(Math.PI / 2) );   // 0\r\n```\r\n\r\n## Kết thúc bài viết\r\n\r\nTrong bài sau, chúng ta sẽ điểm danh qua một số phương thức thường sử dụng của String và một công cụ hỗ trợ nhận dạng các chuỗi ký tự cần thao tác xử lý có tên là Regular Expression. Hẹn gặp lại bạn trong bài viết tiếp theo.\r\n\r\n[[JavaScript] Bài 20 - String & RegExp](/article/view/0067/javascript-bài-20---string-&-regexp)"
}
